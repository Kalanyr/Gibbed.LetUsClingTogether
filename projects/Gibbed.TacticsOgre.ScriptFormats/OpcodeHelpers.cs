/* Copyright (c) 2022 Rick (rick 'at' gibbed 'dot' us)
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would
 *    be appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must not
 *    be misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source
 *    distribution.
 */

using System;

namespace Gibbed.TacticsOgre.ScriptFormats
{
    public static class OpcodeHelpers
    {
        public static int GetArgumentCount(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            Opcode.Label => 0,
            Opcode.Tag => 0,
            Opcode.Halt => 0,
            Opcode.System => 0,
            Opcode.LogicalOr => 1,
            Opcode.LogicalAnd => 1,
            Opcode.Or => 1,
            Opcode.ExclusiveOr => 1,
            Opcode.And => 1,
            Opcode.Equal => 2,
            Opcode.NotEqual => 2,
            Opcode.GreaterThan => 2,
            Opcode.LessThan => 2,
            Opcode.GreaterThanOrEqual => 2,
            Opcode.LessThanOrEqual => 2,
            Opcode.ShiftLeft => 1,
            Opcode.ShiftRight => 1,
            Opcode.Add => 2,
            Opcode.Subtract => 2,
            Opcode.Multiply => 2,
            Opcode.Divide => 2,
            Opcode.Modulo => 2,
            Opcode.Not => 1,
            Opcode.Negate => 1,
            Opcode.Undefined25 => 0,
            Opcode.Undefined26 => 0,
            Opcode.PushA => 0,
            Opcode.PopA => 0,
            Opcode.PushX => 0,
            Opcode.PushY => 0,
            Opcode.PopX => 0,
            Opcode.PopY => 0,
            Opcode.Request => 0,
            Opcode.Unknown34 => 0,
            Opcode.Unknown35 => 0,
            Opcode.Unknown36 => 0,
            Opcode.Unknown37 => 0,
            Opcode.Unknown38 => 0,
            Opcode.Unknown39 => 0,
            Opcode.Unknown40 => 0,
            Opcode.Unknown41 => 0,
            Opcode.NoOperation42 => 0,
            Opcode.NoOperation43 => 0,
            Opcode.NoOperation44 => 0,
            Opcode.Return => 0,
            Opcode.ReturnN => 0,
            Opcode.ReturnTo => 0,
            Opcode.ReturnTN => 0,
            Opcode.Undefined49 => 0,
            Opcode.RequestWait => 0,
            Opcode.NoOperation51 => 0,
            Opcode.RequestChange => 0,
            Opcode.RequestCancel => 0,
            Opcode.PopInt0 => 0,
            Opcode.PopInt1 => 0,
            Opcode.PopInt2 => 0,
            Opcode.PopInt3 => 0,
            Opcode.PopFloat0 => 0,
            Opcode.PopFloat1 => 0,
            Opcode.PopFloat2 => 0,
            Opcode.PopFloat3 => 0,
            Opcode.PushInt0 => 0,
            Opcode.PushInt1 => 0,
            Opcode.PushInt2 => 0,
            Opcode.PushInt3 => 0,
            Opcode.PushFloat0 => 0,
            Opcode.PushFloat1 => 0,
            Opcode.PushFloat2 => 0,
            Opcode.PushFloat3 => 0,
            Opcode.Undefined70 => 0,
            Opcode.Undefined71 => 0,
            Opcode.PushVariable => 0,
            Opcode.PopVariable => 0,
            Opcode.PushVariableDebug => 0,
            Opcode.PushVariablePointer => 0,
            Opcode.PushTag => 0,
            Opcode.PushAct => 0,
            Opcode.PushIntFromTable => 0,
            Opcode.PushIntImmediate => 0,
            Opcode.PushFloatFromTable => 0,
            Opcode.Jump => 0,
            Opcode.JumpIfEqual => 0,
            Opcode.JumpIfGreaterThan => 0,
            Opcode.JumpIfGreaterThanOrEqual => 0,
            Opcode.JumpIfLessThan => 0,
            Opcode.JumpIfLessThanOrEqual => 0,
            Opcode.JumpIfBetween => 0,
            Opcode.Call => 0,
            Opcode.CallAct => 0,
            Opcode.PopXAndJump => 0,
            Opcode.PopXAndJumpIfNotZero => 0,
            Opcode.PopXAndJumpIfZero => 0,
            Opcode.CallAndPopA => 0,
            Opcode.CallActAndPopA => 0,
            Opcode.RequestAll => 0,
            Opcode.JumpInternal => 0,
            Opcode.RequestWaitAll => 0,
            Opcode.Unknown98 => 0,
            Opcode.Unknown99 => 0,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static int GetUnknown08(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            (Opcode)1 => 0,
            (Opcode)2 => 0,
            Opcode.Halt => 0,
            Opcode.System => 0,
            Opcode.LogicalOr => 1,
            Opcode.LogicalAnd => 1,
            Opcode.Or => 1,
            Opcode.ExclusiveOr => 1,
            Opcode.And => 1,
            Opcode.Equal => 1,
            Opcode.NotEqual => 1,
            Opcode.GreaterThan => 1,
            Opcode.LessThan => 1,
            Opcode.GreaterThanOrEqual => 1,
            Opcode.LessThanOrEqual => 1,
            Opcode.ShiftLeft => 1,
            Opcode.ShiftRight => 1,
            Opcode.Add => 2,
            Opcode.Subtract => 2,
            Opcode.Multiply => 2,
            Opcode.Divide => 2,
            Opcode.Modulo => 2,
            Opcode.Not => 1,
            Opcode.Negate => 1,
            Opcode.Undefined25 => 0,
            Opcode.Undefined26 => 0,
            Opcode.PushA => 0,
            Opcode.PopA => 0,
            Opcode.PushX => 0,
            Opcode.PushY => 0,
            Opcode.PopX => 0,
            Opcode.PopY => 0,
            Opcode.Request => 0,
            Opcode.Unknown34 => 0,
            Opcode.Unknown35 => 0,
            Opcode.Unknown36 => 0,
            Opcode.Unknown37 => 0,
            Opcode.Unknown38 => 0,
            Opcode.Unknown39 => 0,
            Opcode.Unknown40 => 0,
            Opcode.Unknown41 => 0,
            Opcode.NoOperation42 => 0,
            Opcode.NoOperation43 => 0,
            Opcode.NoOperation44 => 0,
            Opcode.Return => 0,
            Opcode.ReturnN => 0,
            Opcode.ReturnTo => 0,
            Opcode.ReturnTN => 0,
            Opcode.Undefined49 => 0,
            Opcode.RequestWait => 0,
            Opcode.NoOperation51 => 0,
            Opcode.RequestChange => 0,
            Opcode.RequestCancel => 0,
            Opcode.PopInt0 => 0,
            Opcode.PopInt1 => 0,
            Opcode.PopInt2 => 0,
            Opcode.PopInt3 => 0,
            Opcode.PopFloat0 => 0,
            Opcode.PopFloat1 => 0,
            Opcode.PopFloat2 => 0,
            Opcode.PopFloat3 => 0,
            Opcode.PushInt0 => 0,
            Opcode.PushInt1 => 0,
            Opcode.PushInt2 => 0,
            Opcode.PushInt3 => 0,
            Opcode.PushFloat0 => 0,
            Opcode.PushFloat1 => 0,
            Opcode.PushFloat2 => 0,
            Opcode.PushFloat3 => 0,
            Opcode.Undefined70 => 0,
            Opcode.Undefined71 => 0,
            Opcode.PushVariable => 0,
            Opcode.PopVariable => 0,
            Opcode.PushVariableDebug => 0,
            Opcode.PushVariablePointer => 0,
            Opcode.PushTag => 0,
            Opcode.PushAct => 0,
            Opcode.PushIntFromTable => 0,
            Opcode.PushIntImmediate => 0,
            Opcode.PushFloatFromTable => 0,
            Opcode.Jump => 0,
            Opcode.JumpIfEqual => 0,
            Opcode.JumpIfGreaterThan => 0,
            Opcode.JumpIfGreaterThanOrEqual => 0,
            Opcode.JumpIfLessThan => 0,
            Opcode.JumpIfLessThanOrEqual => 0,
            Opcode.JumpIfBetween => 0,
            Opcode.Call => 0,
            Opcode.CallAct => 0,
            Opcode.PopXAndJump => 0,
            Opcode.PopXAndJumpIfNotZero => 0,
            Opcode.PopXAndJumpIfZero => 0,
            Opcode.CallAndPopA => 0,
            Opcode.CallActAndPopA => 0,
            Opcode.RequestAll => 0,
            Opcode.JumpInternal => 0,
            Opcode.RequestWaitAll => 0,
            Opcode.Unknown98 => 0,
            Opcode.Unknown99 => 0,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static int GetSize(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            Opcode.Label => 0,
            Opcode.Tag => 0,
            Opcode.Halt => 1,
            Opcode.System => 1,
            Opcode.LogicalOr => 1,
            Opcode.LogicalAnd => 1,
            Opcode.Or => 1,
            Opcode.ExclusiveOr => 1,
            Opcode.And => 1,
            Opcode.Equal => 1,
            Opcode.NotEqual => 1,
            Opcode.GreaterThan => 1,
            Opcode.LessThan => 1,
            Opcode.GreaterThanOrEqual => 1,
            Opcode.LessThanOrEqual => 1,
            Opcode.ShiftLeft => 1,
            Opcode.ShiftRight => 1,
            Opcode.Add => 1,
            Opcode.Subtract => 1,
            Opcode.Multiply => 1,
            Opcode.Divide => 1,
            Opcode.Modulo => 1,
            Opcode.Not => 1,
            Opcode.Negate => 1,
            Opcode.Undefined25 => 1,
            Opcode.Undefined26 => 1,
            Opcode.PushA => 1,
            Opcode.PopA => 1,
            Opcode.PushX => 1,
            Opcode.PushY => 1,
            Opcode.PopX => 1,
            Opcode.PopY => 1,
            Opcode.Request => 1,
            Opcode.Unknown34 => 1,
            Opcode.Unknown35 => 1,
            Opcode.Unknown36 => 1,
            Opcode.Unknown37 => 1,
            Opcode.Unknown38 => 1,
            Opcode.Unknown39 => 1,
            Opcode.Unknown40 => 1,
            Opcode.Unknown41 => 1,
            Opcode.NoOperation42 => 1,
            Opcode.NoOperation43 => 1,
            Opcode.NoOperation44 => 1,
            Opcode.Return => 1,
            Opcode.ReturnN => 1,
            Opcode.ReturnTo => 1,
            Opcode.ReturnTN => 1,
            Opcode.Undefined49 => 1,
            Opcode.RequestWait => 1,
            Opcode.NoOperation51 => 1,
            Opcode.RequestChange => 1,
            Opcode.RequestCancel => 1,
            Opcode.PopInt0 => 1,
            Opcode.PopInt1 => 1,
            Opcode.PopInt2 => 1,
            Opcode.PopInt3 => 1,
            Opcode.PopFloat0 => 1,
            Opcode.PopFloat1 => 1,
            Opcode.PopFloat2 => 1,
            Opcode.PopFloat3 => 1,
            Opcode.PushInt0 => 1,
            Opcode.PushInt1 => 1,
            Opcode.PushInt2 => 1,
            Opcode.PushInt3 => 1,
            Opcode.PushFloat0 => 1,
            Opcode.PushFloat1 => 1,
            Opcode.PushFloat2 => 1,
            Opcode.PushFloat3 => 1,
            Opcode.Undefined70 => 1,
            Opcode.Undefined71 => 1,
            Opcode.PushVariable => 3,
            Opcode.PopVariable => 3,
            Opcode.PushVariableDebug => 3,
            Opcode.PushVariablePointer => 3,
            Opcode.PushTag => 3,
            Opcode.PushAct => 3,
            Opcode.PushIntFromTable => 3,
            Opcode.PushIntImmediate => 3,
            Opcode.PushFloatFromTable => 3,
            Opcode.Jump => 3,
            Opcode.JumpIfEqual => 3,
            Opcode.JumpIfGreaterThan => 3,
            Opcode.JumpIfGreaterThanOrEqual => 3,
            Opcode.JumpIfLessThan => 3,
            Opcode.JumpIfLessThanOrEqual => 3,
            Opcode.JumpIfBetween => 3,
            Opcode.Call => 3,
            Opcode.CallAct => 3,
            Opcode.PopXAndJump => 3,
            Opcode.PopXAndJumpIfNotZero => 3,
            Opcode.PopXAndJumpIfZero => 3,
            Opcode.CallAndPopA => 3,
            Opcode.CallActAndPopA => 3,
            Opcode.RequestAll => 3,
            Opcode.JumpInternal => 3,
            Opcode.RequestWaitAll => 3,
            Opcode.Unknown98 => 3,
            Opcode.Unknown99 => 3,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static int GetUnknown0E(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            Opcode.Label => 8,
            Opcode.Tag => 7,
            Opcode.Halt => 0,
            Opcode.System => 0,
            Opcode.LogicalOr => 0,
            Opcode.LogicalAnd => 0,
            Opcode.Or => 0,
            Opcode.ExclusiveOr => 0,
            Opcode.And => 0,
            Opcode.Equal => 0,
            Opcode.NotEqual => 0,
            Opcode.GreaterThan => 0,
            Opcode.LessThan => 0,
            Opcode.GreaterThanOrEqual => 0,
            Opcode.LessThanOrEqual => 0,
            Opcode.ShiftLeft => 0,
            Opcode.ShiftRight => 0,
            Opcode.Add => 0,
            Opcode.Subtract => 0,
            Opcode.Multiply => 0,
            Opcode.Divide => 0,
            Opcode.Modulo => 0,
            Opcode.Not => 0,
            Opcode.Negate => 0,
            Opcode.Undefined25 => 0,
            Opcode.Undefined26 => 0,
            Opcode.PushA => 0,
            Opcode.PopA => 0,
            Opcode.PushX => 0,
            Opcode.PushY => 0,
            Opcode.PopX => 0,
            Opcode.PopY => 0,
            Opcode.Request => 0,
            Opcode.Unknown34 => 0,
            Opcode.Unknown35 => 0,
            Opcode.Unknown36 => 0,
            Opcode.Unknown37 => 0,
            Opcode.Unknown38 => 0,
            Opcode.Unknown39 => 0,
            Opcode.Unknown40 => 0,
            Opcode.Unknown41 => 0,
            Opcode.NoOperation42 => 0,
            Opcode.NoOperation43 => 0,
            Opcode.NoOperation44 => 0,
            Opcode.Return => 0,
            Opcode.ReturnN => 0,
            Opcode.ReturnTo => 0,
            Opcode.ReturnTN => 0,
            Opcode.Undefined49 => 0,
            Opcode.RequestWait => 0,
            Opcode.NoOperation51 => 0,
            Opcode.RequestChange => 0,
            Opcode.RequestCancel => 0,
            Opcode.PopInt0 => 0,
            Opcode.PopInt1 => 0,
            Opcode.PopInt2 => 0,
            Opcode.PopInt3 => 0,
            Opcode.PopFloat0 => 0,
            Opcode.PopFloat1 => 0,
            Opcode.PopFloat2 => 0,
            Opcode.PopFloat3 => 0,
            Opcode.PushInt0 => 0,
            Opcode.PushInt1 => 0,
            Opcode.PushInt2 => 0,
            Opcode.PushInt3 => 0,
            Opcode.PushFloat0 => 0,
            Opcode.PushFloat1 => 0,
            Opcode.PushFloat2 => 0,
            Opcode.PushFloat3 => 0,
            Opcode.Undefined70 => 0,
            Opcode.Undefined71 => 0,
            Opcode.PushVariable => 3,
            Opcode.PopVariable => 3,
            Opcode.PushVariableDebug => 3,
            Opcode.PushVariablePointer => 3,
            Opcode.PushTag => 2,
            Opcode.PushAct => 2,
            Opcode.PushIntFromTable => 2,
            Opcode.PushIntImmediate => 1,
            Opcode.PushFloatFromTable => 5,
            Opcode.Jump => 8,
            Opcode.JumpIfEqual => 8,
            Opcode.JumpIfGreaterThan => 8,
            Opcode.JumpIfGreaterThanOrEqual => 8,
            Opcode.JumpIfLessThan => 8,
            Opcode.JumpIfLessThanOrEqual => 8,
            Opcode.JumpIfBetween => 8,
            Opcode.Call => 4,
            Opcode.CallAct => 4,
            Opcode.PopXAndJump => 8,
            Opcode.PopXAndJumpIfNotZero => 8,
            Opcode.PopXAndJumpIfZero => 8,
            Opcode.CallAndPopA => 4,
            Opcode.CallActAndPopA => 4,
            Opcode.RequestAll => 6,
            Opcode.JumpInternal => 8,
            Opcode.RequestWaitAll => 6,
            Opcode.Unknown98 => 0,
            Opcode.Unknown99 => 6,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static bool IsJump(this Opcode opcode) => opcode switch
        {
            Opcode.Jump => true,
            Opcode.JumpIfEqual => true,
            Opcode.JumpIfGreaterThan => true,
            Opcode.JumpIfGreaterThanOrEqual => true,
            Opcode.JumpIfLessThan => true,
            Opcode.JumpIfLessThanOrEqual => true,
            Opcode.JumpIfBetween => true,
            Opcode.PopXAndJump => true,
            Opcode.PopXAndJumpIfNotZero => true,
            Opcode.PopXAndJumpIfZero => true,
            Opcode.JumpInternal => true,
            _ => false,
        };

        public static bool HasImmediate(this Opcode opcode) => opcode switch
        {
            Opcode.Halt => false,
            Opcode.System => false,
            Opcode.LogicalOr => false,
            Opcode.LogicalAnd => false,
            Opcode.Or => false,
            Opcode.ExclusiveOr => false,
            Opcode.And => false,
            Opcode.Equal => false,
            Opcode.NotEqual => false,
            Opcode.GreaterThan => false,
            Opcode.LessThan => false,
            Opcode.GreaterThanOrEqual => false,
            Opcode.LessThanOrEqual => false,
            Opcode.ShiftLeft => false,
            Opcode.ShiftRight => false,
            Opcode.Add => false,
            Opcode.Subtract => false,
            Opcode.Multiply => false,
            Opcode.Divide => false,
            Opcode.Modulo => false,
            Opcode.Not => false,
            Opcode.Negate => false,
            Opcode.Undefined25 => false,
            Opcode.Undefined26 => false,
            Opcode.PushA => false,
            Opcode.PopA => false,
            Opcode.PushX => false,
            Opcode.PushY => false,
            Opcode.PopX => false,
            Opcode.PopY => false,
            Opcode.Request => false,
            Opcode.Unknown34 => false,
            Opcode.Unknown35 => false,
            Opcode.Unknown36 => false,
            Opcode.Unknown37 => false,
            Opcode.Unknown38 => false,
            Opcode.Unknown39 => false,
            Opcode.Unknown40 => false,
            Opcode.Unknown41 => false,
            Opcode.NoOperation42 => false,
            Opcode.NoOperation43 => false,
            Opcode.NoOperation44 => false,
            Opcode.Return => false,
            Opcode.ReturnN => false,
            Opcode.ReturnTo => false,
            Opcode.ReturnTN => false,
            Opcode.Undefined49 => false,
            Opcode.RequestWait => false,
            Opcode.NoOperation51 => false,
            Opcode.RequestChange => false,
            Opcode.RequestCancel => false,
            Opcode.PopInt0 => false,
            Opcode.PopInt1 => false,
            Opcode.PopInt2 => false,
            Opcode.PopInt3 => false,
            Opcode.PopFloat0 => false,
            Opcode.PopFloat1 => false,
            Opcode.PopFloat2 => false,
            Opcode.PopFloat3 => false,
            Opcode.PushInt0 => false,
            Opcode.PushInt1 => false,
            Opcode.PushInt2 => false,
            Opcode.PushInt3 => false,
            Opcode.PushFloat0 => false,
            Opcode.PushFloat1 => false,
            Opcode.PushFloat2 => false,
            Opcode.PushFloat3 => false,
            Opcode.Undefined70 => false,
            Opcode.Undefined71 => false,
            Opcode.PushVariable => true,
            Opcode.PopVariable => true,
            Opcode.PushVariableDebug => true,
            Opcode.PushVariablePointer => true,
            Opcode.PushTag => true,
            Opcode.PushAct => true,
            Opcode.PushIntFromTable => true,
            Opcode.PushIntImmediate => true,
            Opcode.PushFloatFromTable => true,
            Opcode.Jump => true,
            Opcode.JumpIfEqual => true,
            Opcode.JumpIfGreaterThan => true,
            Opcode.JumpIfGreaterThanOrEqual => true,
            Opcode.JumpIfLessThan => true,
            Opcode.JumpIfLessThanOrEqual => true,
            Opcode.JumpIfBetween => true,
            Opcode.Call => true,
            Opcode.CallAct => true,
            Opcode.PopXAndJump => true,
            Opcode.PopXAndJumpIfNotZero => true,
            Opcode.PopXAndJumpIfZero => true,
            Opcode.CallAndPopA => true,
            Opcode.CallActAndPopA => true,
            Opcode.RequestAll => true,
            Opcode.JumpInternal => true,
            Opcode.RequestWaitAll => true,
            Opcode.Unknown98 => true,
            Opcode.Unknown99 => true,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };
    }
}
