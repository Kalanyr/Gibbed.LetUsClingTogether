/* Copyright (c) 2021 Rick (rick 'at' gibbed 'dot' us)
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would
 *    be appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must not
 *    be misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source
 *    distribution.
 */

using System;

namespace Gibbed.LetUsClingTogether.FileFormats.Script
{
    public static class OpcodeHelpers
    {
        public static int GetUnknown04(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            (Opcode)1 => 0,
            (Opcode)2 => 0,
            Opcode.Unknown3 => 0,
            Opcode.Pop => 0,
            Opcode.Either => 1,
            Opcode.Both => 1,
            Opcode.Or => 1,
            Opcode.ExclusiveOr => 1,
            Opcode.And => 1,
            Opcode.Equal => 2,
            Opcode.NotEqual => 2,
            Opcode.GreaterThan => 2,
            Opcode.LessThan => 2,
            Opcode.GreaterThanOrEqual => 2,
            Opcode.LessThanOrEqual => 2,
            Opcode.ShiftLeft => 1,
            Opcode.ShiftRight => 1,
            Opcode.Add => 2,
            Opcode.Subtract => 2,
            Opcode.Multiply => 2,
            Opcode.Divide => 2,
            Opcode.Modulo => 2,
            Opcode.Not => 1,
            Opcode.Negate => 1,
            Opcode.Undefined25 => 0,
            Opcode.Undefined26 => 0,
            Opcode.PushFoo => 0,
            Opcode.PopFoo => 0,
            Opcode.PushBar => 0,
            Opcode.PushBaz => 0,
            Opcode.PopBar => 0,
            Opcode.PopBaz => 0,
            Opcode.Unknown33 => 0,
            Opcode.Unknown34 => 0,
            Opcode.Unknown35 => 0,
            Opcode.Unknown36 => 0,
            Opcode.Unknown37 => 0,
            Opcode.Unknown38 => 0,
            Opcode.Unknown39 => 0,
            Opcode.Unknown40 => 0,
            Opcode.Unknown41 => 0,
            Opcode.NoOperation42 => 0,
            Opcode.NoOperation43 => 0,
            Opcode.NoOperation44 => 0,
            Opcode.Return => 0,
            Opcode.UnknownReturn46 => 0,
            Opcode.UnknownJump47 => 0,
            Opcode.UnknownJump48 => 0,
            Opcode.Undefined49 => 0,
            Opcode.Unknown50 => 0,
            Opcode.NoOperation51 => 0,
            Opcode.Unknown52 => 0,
            Opcode.Unknown53 => 0,
            Opcode.PopIntParam38 => 0,
            Opcode.PopIntParam3C => 0,
            Opcode.PopIntParam40 => 0,
            Opcode.PopIntParam44 => 0,
            Opcode.PopFloatParam48 => 0,
            Opcode.PopFloatParam4C => 0,
            Opcode.PopFloatParam50 => 0,
            Opcode.PopFloatParam54 => 0,
            Opcode.PushIntParam38 => 0,
            Opcode.PushIntParam3C => 0,
            Opcode.PushIntParam40 => 0,
            Opcode.PushIntParam44 => 0,
            Opcode.PushFloatParam48 => 0,
            Opcode.PushFloatParam4C => 0,
            Opcode.PushFloatParam50 => 0,
            Opcode.PushFloatParam54 => 0,
            Opcode.Undefined70 => 0,
            Opcode.Undefined71 => 0,
            Opcode.MaybeGetVariable => 0,
            Opcode.MaybeSetVariable => 0,
            Opcode.Unknown74 => 0,
            Opcode.Unknown75 => 0,
            Opcode.PushUnknown76 => 0,
            Opcode.PushUnknown77 => 0,
            Opcode.PushUnknown78 => 0,
            Opcode.PushInt => 0,
            Opcode.Unknown80 => 0,
            Opcode.Jump => 0,
            Opcode.JumpIfEqual => 0,
            Opcode.JumpIfGreaterThan => 0,
            Opcode.JumpIfGreaterThanOrEqual => 0,
            Opcode.JumpIfLessThan => 0,
            Opcode.JumpIfLessThanOrEqual => 0,
            Opcode.JumpIfBetween => 0,
            Opcode.CallNative => 0,
            Opcode.UnknownCallNative => 0,
            Opcode.PopBarAndJump => 0,
            Opcode.PopBarAndJumpIfNotZero => 0,
            Opcode.PopBarAndJumpIfZero => 0,
            Opcode.CallNativeWithBar => 0,
            Opcode.UnknownBar94 => 0,
            Opcode.Unknown95 => 0,
            Opcode.Jump_ => 0,
            Opcode.Unknown97 => 0,
            Opcode.Unknown98 => 0,
            Opcode.Unknown99 => 0,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static int GetUnknown08(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            (Opcode)1 => 0,
            (Opcode)2 => 0,
            Opcode.Unknown3 => 0,
            Opcode.Pop => 0,
            Opcode.Either => 1,
            Opcode.Both => 1,
            Opcode.Or => 1,
            Opcode.ExclusiveOr => 1,
            Opcode.And => 1,
            Opcode.Equal => 1,
            Opcode.NotEqual => 1,
            Opcode.GreaterThan => 1,
            Opcode.LessThan => 1,
            Opcode.GreaterThanOrEqual => 1,
            Opcode.LessThanOrEqual => 1,
            Opcode.ShiftLeft => 1,
            Opcode.ShiftRight => 1,
            Opcode.Add => 2,
            Opcode.Subtract => 2,
            Opcode.Multiply => 2,
            Opcode.Divide => 2,
            Opcode.Modulo => 2,
            Opcode.Not => 1,
            Opcode.Negate => 1,
            Opcode.Undefined25 => 0,
            Opcode.Undefined26 => 0,
            Opcode.PushFoo => 0,
            Opcode.PopFoo => 0,
            Opcode.PushBar => 0,
            Opcode.PushBaz => 0,
            Opcode.PopBar => 0,
            Opcode.PopBaz => 0,
            Opcode.Unknown33 => 0,
            Opcode.Unknown34 => 0,
            Opcode.Unknown35 => 0,
            Opcode.Unknown36 => 0,
            Opcode.Unknown37 => 0,
            Opcode.Unknown38 => 0,
            Opcode.Unknown39 => 0,
            Opcode.Unknown40 => 0,
            Opcode.Unknown41 => 0,
            Opcode.NoOperation42 => 0,
            Opcode.NoOperation43 => 0,
            Opcode.NoOperation44 => 0,
            Opcode.Return => 0,
            Opcode.UnknownReturn46 => 0,
            Opcode.UnknownJump47 => 0,
            Opcode.UnknownJump48 => 0,
            Opcode.Undefined49 => 0,
            Opcode.Unknown50 => 0,
            Opcode.NoOperation51 => 0,
            Opcode.Unknown52 => 0,
            Opcode.Unknown53 => 0,
            Opcode.PopIntParam38 => 0,
            Opcode.PopIntParam3C => 0,
            Opcode.PopIntParam40 => 0,
            Opcode.PopIntParam44 => 0,
            Opcode.PopFloatParam48 => 0,
            Opcode.PopFloatParam4C => 0,
            Opcode.PopFloatParam50 => 0,
            Opcode.PopFloatParam54 => 0,
            Opcode.PushIntParam38 => 0,
            Opcode.PushIntParam3C => 0,
            Opcode.PushIntParam40 => 0,
            Opcode.PushIntParam44 => 0,
            Opcode.PushFloatParam48 => 0,
            Opcode.PushFloatParam4C => 0,
            Opcode.PushFloatParam50 => 0,
            Opcode.PushFloatParam54 => 0,
            Opcode.Undefined70 => 0,
            Opcode.Undefined71 => 0,
            Opcode.MaybeGetVariable => 0,
            Opcode.MaybeSetVariable => 0,
            Opcode.Unknown74 => 0,
            Opcode.Unknown75 => 0,
            Opcode.PushUnknown76 => 0,
            Opcode.PushUnknown77 => 0,
            Opcode.PushUnknown78 => 0,
            Opcode.PushInt => 0,
            Opcode.Unknown80 => 0,
            Opcode.Jump => 0,
            Opcode.JumpIfEqual => 0,
            Opcode.JumpIfGreaterThan => 0,
            Opcode.JumpIfGreaterThanOrEqual => 0,
            Opcode.JumpIfLessThan => 0,
            Opcode.JumpIfLessThanOrEqual => 0,
            Opcode.JumpIfBetween => 0,
            Opcode.CallNative => 0,
            Opcode.UnknownCallNative => 0,
            Opcode.PopBarAndJump => 0,
            Opcode.PopBarAndJumpIfNotZero => 0,
            Opcode.PopBarAndJumpIfZero => 0,
            Opcode.CallNativeWithBar => 0,
            Opcode.UnknownBar94 => 0,
            Opcode.Unknown95 => 0,
            Opcode.Jump_ => 0,
            Opcode.Unknown97 => 0,
            Opcode.Unknown98 => 0,
            Opcode.Unknown99 => 0,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static int GetSize(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            (Opcode)1 => 0,
            (Opcode)2 => 0,
            Opcode.Unknown3 => 1,
            Opcode.Pop => 1,
            Opcode.Either => 1,
            Opcode.Both => 1,
            Opcode.Or => 1,
            Opcode.ExclusiveOr => 1,
            Opcode.And => 1,
            Opcode.Equal => 1,
            Opcode.NotEqual => 1,
            Opcode.GreaterThan => 1,
            Opcode.LessThan => 1,
            Opcode.GreaterThanOrEqual => 1,
            Opcode.LessThanOrEqual => 1,
            Opcode.ShiftLeft => 1,
            Opcode.ShiftRight => 1,
            Opcode.Add => 1,
            Opcode.Subtract => 1,
            Opcode.Multiply => 1,
            Opcode.Divide => 1,
            Opcode.Modulo => 1,
            Opcode.Not => 1,
            Opcode.Negate => 1,
            Opcode.Undefined25 => 1,
            Opcode.Undefined26 => 1,
            Opcode.PushFoo => 1,
            Opcode.PopFoo => 1,
            Opcode.PushBar => 1,
            Opcode.PushBaz => 1,
            Opcode.PopBar => 1,
            Opcode.PopBaz => 1,
            Opcode.Unknown33 => 1,
            Opcode.Unknown34 => 1,
            Opcode.Unknown35 => 1,
            Opcode.Unknown36 => 1,
            Opcode.Unknown37 => 1,
            Opcode.Unknown38 => 1,
            Opcode.Unknown39 => 1,
            Opcode.Unknown40 => 1,
            Opcode.Unknown41 => 1,
            Opcode.NoOperation42 => 1,
            Opcode.NoOperation43 => 1,
            Opcode.NoOperation44 => 1,
            Opcode.Return => 1,
            Opcode.UnknownReturn46 => 1,
            Opcode.UnknownJump47 => 1,
            Opcode.UnknownJump48 => 1,
            Opcode.Undefined49 => 1,
            Opcode.Unknown50 => 1,
            Opcode.NoOperation51 => 1,
            Opcode.Unknown52 => 1,
            Opcode.Unknown53 => 1,
            Opcode.PopIntParam38 => 1,
            Opcode.PopIntParam3C => 1,
            Opcode.PopIntParam40 => 1,
            Opcode.PopIntParam44 => 1,
            Opcode.PopFloatParam48 => 1,
            Opcode.PopFloatParam4C => 1,
            Opcode.PopFloatParam50 => 1,
            Opcode.PopFloatParam54 => 1,
            Opcode.PushIntParam38 => 1,
            Opcode.PushIntParam3C => 1,
            Opcode.PushIntParam40 => 1,
            Opcode.PushIntParam44 => 1,
            Opcode.PushFloatParam48 => 1,
            Opcode.PushFloatParam4C => 1,
            Opcode.PushFloatParam50 => 1,
            Opcode.PushFloatParam54 => 1,
            Opcode.Undefined70 => 1,
            Opcode.Undefined71 => 1,
            Opcode.MaybeGetVariable => 3,
            Opcode.MaybeSetVariable => 3,
            Opcode.Unknown74 => 3,
            Opcode.Unknown75 => 3,
            Opcode.PushUnknown76 => 3,
            Opcode.PushUnknown77 => 3,
            Opcode.PushUnknown78 => 3,
            Opcode.PushInt => 3,
            Opcode.Unknown80 => 3,
            Opcode.Jump => 3,
            Opcode.JumpIfEqual => 3,
            Opcode.JumpIfGreaterThan => 3,
            Opcode.JumpIfGreaterThanOrEqual => 3,
            Opcode.JumpIfLessThan => 3,
            Opcode.JumpIfLessThanOrEqual => 3,
            Opcode.JumpIfBetween => 3,
            Opcode.CallNative => 3,
            Opcode.UnknownCallNative => 3,
            Opcode.PopBarAndJump => 3,
            Opcode.PopBarAndJumpIfNotZero => 3,
            Opcode.PopBarAndJumpIfZero => 3,
            Opcode.CallNativeWithBar => 3,
            Opcode.UnknownBar94 => 3,
            Opcode.Unknown95 => 3,
            Opcode.Jump_ => 3,
            Opcode.Unknown97 => 3,
            Opcode.Unknown98 => 3,
            Opcode.Unknown99 => 3,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static int GetUnknown0E(this Opcode opcode) => opcode switch
        {
            Opcode.Invalid => 0,
            (Opcode)1 => 8,
            (Opcode)2 => 7,
            Opcode.Unknown3 => 0,
            Opcode.Pop => 0,
            Opcode.Either => 0,
            Opcode.Both => 0,
            Opcode.Or => 0,
            Opcode.ExclusiveOr => 0,
            Opcode.And => 0,
            Opcode.Equal => 0,
            Opcode.NotEqual => 0,
            Opcode.GreaterThan => 0,
            Opcode.LessThan => 0,
            Opcode.GreaterThanOrEqual => 0,
            Opcode.LessThanOrEqual => 0,
            Opcode.ShiftLeft => 0,
            Opcode.ShiftRight => 0,
            Opcode.Add => 0,
            Opcode.Subtract => 0,
            Opcode.Multiply => 0,
            Opcode.Divide => 0,
            Opcode.Modulo => 0,
            Opcode.Not => 0,
            Opcode.Negate => 0,
            Opcode.Undefined25 => 0,
            Opcode.Undefined26 => 0,
            Opcode.PushFoo => 0,
            Opcode.PopFoo => 0,
            Opcode.PushBar => 0,
            Opcode.PushBaz => 0,
            Opcode.PopBar => 0,
            Opcode.PopBaz => 0,
            Opcode.Unknown33 => 0,
            Opcode.Unknown34 => 0,
            Opcode.Unknown35 => 0,
            Opcode.Unknown36 => 0,
            Opcode.Unknown37 => 0,
            Opcode.Unknown38 => 0,
            Opcode.Unknown39 => 0,
            Opcode.Unknown40 => 0,
            Opcode.Unknown41 => 0,
            Opcode.NoOperation42 => 0,
            Opcode.NoOperation43 => 0,
            Opcode.NoOperation44 => 0,
            Opcode.Return => 0,
            Opcode.UnknownReturn46 => 0,
            Opcode.UnknownJump47 => 0,
            Opcode.UnknownJump48 => 0,
            Opcode.Undefined49 => 0,
            Opcode.Unknown50 => 0,
            Opcode.NoOperation51 => 0,
            Opcode.Unknown52 => 0,
            Opcode.Unknown53 => 0,
            Opcode.PopIntParam38 => 0,
            Opcode.PopIntParam3C => 0,
            Opcode.PopIntParam40 => 0,
            Opcode.PopIntParam44 => 0,
            Opcode.PopFloatParam48 => 0,
            Opcode.PopFloatParam4C => 0,
            Opcode.PopFloatParam50 => 0,
            Opcode.PopFloatParam54 => 0,
            Opcode.PushIntParam38 => 0,
            Opcode.PushIntParam3C => 0,
            Opcode.PushIntParam40 => 0,
            Opcode.PushIntParam44 => 0,
            Opcode.PushFloatParam48 => 0,
            Opcode.PushFloatParam4C => 0,
            Opcode.PushFloatParam50 => 0,
            Opcode.PushFloatParam54 => 0,
            Opcode.Undefined70 => 0,
            Opcode.Undefined71 => 0,
            Opcode.MaybeGetVariable => 3,
            Opcode.MaybeSetVariable => 3,
            Opcode.Unknown74 => 3,
            Opcode.Unknown75 => 3,
            Opcode.PushUnknown76 => 2,
            Opcode.PushUnknown77 => 2,
            Opcode.PushUnknown78 => 2,
            Opcode.PushInt => 1,
            Opcode.Unknown80 => 5,
            Opcode.Jump => 8,
            Opcode.JumpIfEqual => 8,
            Opcode.JumpIfGreaterThan => 8,
            Opcode.JumpIfGreaterThanOrEqual => 8,
            Opcode.JumpIfLessThan => 8,
            Opcode.JumpIfLessThanOrEqual => 8,
            Opcode.JumpIfBetween => 8,
            Opcode.CallNative => 4,
            Opcode.UnknownCallNative => 4,
            Opcode.PopBarAndJump => 8,
            Opcode.PopBarAndJumpIfNotZero => 8,
            Opcode.PopBarAndJumpIfZero => 8,
            Opcode.CallNativeWithBar => 4,
            Opcode.UnknownBar94 => 4,
            Opcode.Unknown95 => 6,
            Opcode.Jump_ => 8,
            Opcode.Unknown97 => 6,
            Opcode.Unknown98 => 0,
            Opcode.Unknown99 => 6,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static bool IsJump(this Opcode opcode) => opcode switch
        {
            Opcode.Jump => true,
            Opcode.JumpIfEqual => true,
            Opcode.JumpIfGreaterThan => true,
            Opcode.JumpIfGreaterThanOrEqual => true,
            Opcode.JumpIfLessThan => true,
            Opcode.JumpIfLessThanOrEqual => true,
            Opcode.JumpIfBetween => true,
            Opcode.PopBarAndJump => true,
            Opcode.PopBarAndJumpIfNotZero => true,
            Opcode.PopBarAndJumpIfZero => true,
            Opcode.Jump_ => true,
            _ => false,
        };

        public static bool HasArgument(this Opcode opcode) => opcode switch
        {
            Opcode.Unknown3 => false,
            Opcode.Pop => false,
            Opcode.Either => false,
            Opcode.Both => false,
            Opcode.Or => false,
            Opcode.ExclusiveOr => false,
            Opcode.And => false,
            Opcode.Equal => false,
            Opcode.NotEqual => false,
            Opcode.GreaterThan => false,
            Opcode.LessThan => false,
            Opcode.GreaterThanOrEqual => false,
            Opcode.LessThanOrEqual => false,
            Opcode.ShiftLeft => false,
            Opcode.ShiftRight => false,
            Opcode.Add => false,
            Opcode.Subtract => false,
            Opcode.Multiply => false,
            Opcode.Divide => false,
            Opcode.Modulo => false,
            Opcode.Not => false,
            Opcode.Negate => false,
            Opcode.Undefined25 => false,
            Opcode.Undefined26 => false,
            Opcode.PushFoo => false,
            Opcode.PopFoo => false,
            Opcode.PushBar => false,
            Opcode.PushBaz => false,
            Opcode.PopBar => false,
            Opcode.PopBaz => false,
            Opcode.Unknown33 => false,
            Opcode.Unknown34 => false,
            Opcode.Unknown35 => false,
            Opcode.Unknown36 => false,
            Opcode.Unknown37 => false,
            Opcode.Unknown38 => false,
            Opcode.Unknown39 => false,
            Opcode.Unknown40 => false,
            Opcode.Unknown41 => false,
            Opcode.NoOperation42 => false,
            Opcode.NoOperation43 => false,
            Opcode.NoOperation44 => false,
            Opcode.Return => false,
            Opcode.UnknownReturn46 => false,
            Opcode.UnknownJump47 => false,
            Opcode.UnknownJump48 => false,
            Opcode.Undefined49 => false,
            Opcode.Unknown50 => false,
            Opcode.NoOperation51 => false,
            Opcode.Unknown52 => false,
            Opcode.Unknown53 => false,
            Opcode.PopIntParam38 => false,
            Opcode.PopIntParam3C => false,
            Opcode.PopIntParam40 => false,
            Opcode.PopIntParam44 => false,
            Opcode.PopFloatParam48 => false,
            Opcode.PopFloatParam4C => false,
            Opcode.PopFloatParam50 => false,
            Opcode.PopFloatParam54 => false,
            Opcode.PushIntParam38 => false,
            Opcode.PushIntParam3C => false,
            Opcode.PushIntParam40 => false,
            Opcode.PushIntParam44 => false,
            Opcode.PushFloatParam48 => false,
            Opcode.PushFloatParam4C => false,
            Opcode.PushFloatParam50 => false,
            Opcode.PushFloatParam54 => false,
            Opcode.Undefined70 => false,
            Opcode.Undefined71 => false,
            Opcode.MaybeGetVariable => true,
            Opcode.MaybeSetVariable => true,
            Opcode.Unknown74 => true,
            Opcode.Unknown75 => true,
            Opcode.PushUnknown76 => true,
            Opcode.PushUnknown77 => true,
            Opcode.PushUnknown78 => true,
            Opcode.PushInt => true,
            Opcode.Unknown80 => true,
            Opcode.Jump => true,
            Opcode.JumpIfEqual => true,
            Opcode.JumpIfGreaterThan => true,
            Opcode.JumpIfGreaterThanOrEqual => true,
            Opcode.JumpIfLessThan => true,
            Opcode.JumpIfLessThanOrEqual => true,
            Opcode.JumpIfBetween => true,
            Opcode.CallNative => true,
            Opcode.UnknownCallNative => true,
            Opcode.PopBarAndJump => true,
            Opcode.PopBarAndJumpIfNotZero => true,
            Opcode.PopBarAndJumpIfZero => true,
            Opcode.CallNativeWithBar => true,
            Opcode.UnknownBar94 => true,
            Opcode.Unknown95 => true,
            Opcode.Jump_ => true,
            Opcode.Unknown97 => true,
            Opcode.Unknown98 => true,
            Opcode.Unknown99 => true,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };
    }
}
